{"version":3,"sources":["images/headshot.png","App.js","registerServiceWorker.js","index.js"],"names":["App","className","rel","href","integrity","crossorigin","src","headshot","class","size","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uNAAe,MAA0B,qC,eCyE1BA,E,4JApEb,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,sBACEC,IAAI,aACJC,KAAK,0DACLC,UAAU,0EACVC,YAAY,cAEd,qBAAKJ,UAAU,cAAf,SACE,qBAAKA,UAAU,WAAWK,IAAKC,MAEjC,qBAAKN,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,0CACA,qBAAKA,UAAU,YAAf,SACE,yIAKF,qBAAKA,UAAU,YAAf,SACE,2EAC0C,IACxC,mBAAGE,KAAK,yBAAR,kBAFF,+DAGyC,IACvC,mBAAGA,KAAK,uDAAR,4BAEK,IANP,6BAUF,qBAAKF,UAAU,YAAf,SACE,mFACkD,IAChD,mBAAGE,KAAK,4BAAR,sBAFF,2EAMF,iDACA,sBAAKF,UAAU,kBAAf,UACE,mBAAGE,KAAK,uCAAR,SACE,mBAAGK,MAAM,qBAAqBC,KAAK,SAGrC,mBAAGN,KAAK,6BAAR,SACE,mBAAGK,MAAM,mBAAmBC,KAAK,SAGnC,mBAAGN,KAAK,6BAAR,SACE,mBAAGK,MAAM,gBAAgBC,KAAK,SAGhC,mBAAGN,KAAK,4DAAR,SACE,mBAAGK,MAAM,iBAAiBC,KAAK,SAGjC,mBAAGN,KAAK,gCAAR,SACE,mBAAGK,MAAM,iBAAiBC,KAAK,wB,GA3D7BC,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,qBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,qBAAN,sBAEP5B,EAwCV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEA5DAoB,CAAwBjC,GAGxBD,EAAgBC,OChCxBkC,K","file":"static/js/main.4a5df0df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/headshot.b264758a.png\";","import React, { Component } from \"react\";\nimport headshot from \"./images/headshot.png\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://use.fontawesome.com/releases/v5.7.2/css/all.css\"\n          integrity=\"sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr\"\n          crossorigin=\"anonymous\"\n        />\n        <div className=\"photo-panel\">\n          <img className=\"headshot\" src={headshot} />\n        </div>\n        <div className=\"text-panel\">\n          <div className=\"content-container\">\n            <h1>Jay Hack</h1>\n            <div className=\"paragraph\">\n              <span>\n                I'm an AI enthusiast and mathemagician excited about building\n                impactful products and organizations.\n              </span>\n            </div>\n            <div className=\"paragraph\">\n              <span>\n                I'm currently the co-founder and CEO at{\" \"}\n                <a href=\"https://mirabeauty.com\">Mira</a>, building the beauty\n                shopping experience of the future with{\" \"}\n                <a href=\"https://www.linkedin.com/in/brandon-garcia-28555850/\">\n                  Brandon Garcia\n                </a>{\" \"}\n                and our amazing team.\n              </span>\n            </div>\n            <div className=\"paragraph\">\n              <span>\n                Previously, I built intelligent data systems at{\" \"}\n                <a href=\"https://www.palantir.com/\">Palantir</a>, ran a data\n                science consulting firm and studied CS/AI at Stanford.\n              </span>\n            </div>\n            <h2>Connect with me</h2>\n            <div className=\"icons-container\">\n              <a href=\"https://www.linkedin.com/in/jayhack/\">\n                <i class=\"fab fa-linkedin-in\" size=\"lg\" />\n              </a>\n\n              <a href=\"https://angel.co/_jayhack_\">\n                <i class=\"fab fa-angellist\" size=\"lg\" />\n              </a>\n\n              <a href=\"https://angel.co/_jayhack_\">\n                <i class=\"fab fa-github\" size=\"lg\" />\n              </a>\n\n              <a href=\"https://www.youtube.com/channel/UCZpfeh2D4vYm8k4MjlaRvvA/\">\n                <i class=\"fab fa-youtube\" size=\"lg\" />\n              </a>\n\n              <a href=\"https://twitter.com/_jayhack_\">\n                <i class=\"fab fa-twitter\" size=\"lg\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}